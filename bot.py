from decouple import config
from random import randint, choice
from aiogram import Bot, Dispatcher, executor, types
from database_handler import add_user, user_exists, get_user_money, get_leaderboard, user_in_leaderboard, \
    bonus_available, change_money, get_business_price, buy_business, get_user_businesses, check_business_profit, \
    receive_business_profit
import markups

bot = Bot(token=config('TOKEN'))
dp = Dispatcher(bot=bot)


@dp.message_handler(commands='start')
async def start(message: types.Message):
    username = message.from_user.username
    if not user_exists(username):
        add_user(username, money=0)
        await message.answer('–Ø –¥–æ–±–∞–≤–∏–ª —Ç–µ–±—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ù–µ –≤–æ–∑—Ä–∞–∂–∞–µ—à—å, –≤–µ–¥—å? –í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–æ!')
    else:
        await message.answer(f'–¢—ã —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')

    await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É, {username}', reply_markup=markups.main_menu)


@dp.message_handler(commands='menu')
async def start(message: types.Message):
    username = message.from_user.username
    await message.answer(f'üòö –ü—Ä–∏–≤–µ—Ç, –ø—É–ø—Å–∏–∫ {username}! –í–æ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –º–µ–Ω—é:',
                         reply_markup=markups.main_menu)


@dp.message_handler(commands='coin_toss')
async def coin_toss(message: types.Message):
    username = message.from_user.username
    msg_words = message.text.split()
    try:
        stake_money = int(msg_words[-1])
        if stake_money > get_user_money(username):
            await message.reply(
                f"‚ùå –ò–∑–≤–∏–Ω–∏, –Ω–æ –¥–µ–Ω–µ–≥ —Ç–µ–±–µ –Ω–∞ —Ç–∞–∫—É—é —Å—Ç–∞–≤–∫—É –Ω–µ —Ö–≤–∞—Ç–∏—Ç. –í–ª–µ–∑–∞—Ç—å –≤ –¥–æ–ª–≥–∏ —Ç–æ–∂–µ –Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç, —Ç–∞–∫ —á—Ç–æ –ø–æ—É–º–µ—Ä—å —Å–≤–æ–∏ –∞–º–±–∏—Ü–∏–∏")
            return None  # Read as "break"

        if len(msg_words) == 3 and (msg_words[1] == '–æ—Ä—ë–ª' or msg_words[1] == '—Ä–µ—à–∫–∞'):
            stake_outcome = msg_words[1]
            outcome = "–æ—Ä—ë–ª" if randint(0, 1) == 0 else "—Ä–µ—à–∫–∞"
            if stake_outcome == outcome:
                change_money(username, stake_money)
                await message.reply(
                    f"ü•≥ –£—Ä–∞, –ø–æ–±–µ–¥–∞! –ò—Å—Ö–æ–¥ –ø–∞–¥–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã ‚Äî {outcome}. –í —Ç–≤–æ—ë–º –∫–æ—à–µ–ª—å–∫–µ –≤–Ω–µ–∑–∞–ø–Ω–æ –æ–∫–∞–∑–∞–ª–∏—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ {stake_money}üíµ.\n–ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —É–¥–∞—á–∞ —Ç–µ–±—è –Ω–µ –ø–æ–¥–≤–µ–¥—ë—Ç, –º–æ–∂–µ—à—å –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É –µ—â—ë —Ä–∞–∑–æ–∫.",
                    reply_markup=markups.to_menus)
            else:
                change_money(username, -stake_money)
                await message.reply(
                    f"üò∞ –ö–∞–∫–∞—è –¥–æ—Å–∞–¥–∞! –ò—Å—Ö–æ–¥ –ø–∞–¥–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã ‚Äî {outcome}. –¢–≤–æ–∏ {stake_money}üíµ –≤–Ω–µ–∑–∞–ø–Ω–æ –ø—Ä–æ–ø–∞–ª–∏ –∏–∑ –∫–æ—à–µ–ª—å–∫–∞.\n–ú–æ–∂–µ—Ç, –ø–æ–ª—É—á–∏—Ç—Å—è –æ—Ç—ã–≥—Ä–∞—Ç—å—Å—è, –µ—Å–ª–∏ –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É –µ—â—ë —Ä–∞–∑–æ–∫, —Ö–æ—Ç—è, —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –º–æ–∂–Ω–æ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –µ—â—ë –±–æ–ª—å—à–µ. –í—ã–±–æ—Ä –∑–∞ —Ç–æ–±–æ–π.",
                    reply_markup=markups.to_menus)
        else:
            await message.reply(
                f'–° —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –í–æ—Ç –∫–∞–∫ –µ—ë –Ω–∞–¥–æ –≤–≤–æ–¥–∏—Ç—å:\n/coin_toss <–æ—Ä—ë–ª/—Ä–µ—à–∫–∞> <—Ç–≤–æ—è —Å—Ç–∞–≤–∫–∞>\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n/coin_toss {"–æ—Ä—ë–ª" if randint(0, 1) == 0 else "—Ä–µ—à–∫–∞"} {randint(100, 10000)}',
                reply_markup=markups.to_menus)
    except:
        await message.reply(
            f'–° —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –í–æ—Ç –∫–∞–∫ –µ—ë –Ω–∞–¥–æ –≤–≤–æ–¥–∏—Ç—å:\n/coin_toss <–æ—Ä—ë–ª/—Ä–µ—à–∫–∞> <—Ç–≤–æ—è —Å—Ç–∞–≤–∫–∞>\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n/coin_toss {"–æ—Ä—ë–ª" if randint(0, 1) == 0 else "—Ä–µ—à–∫–∞"} {randint(100, 10000)}',
            reply_markup=markups.to_menus)


@dp.message_handler()
async def other(message: types.Message):
    await message.reply(
        '–Ø –∏–∑–æ –≤—Å–µ—Ö —Å–∏–ª –ø—ã—Ç–∞—é—Å—å —Ç–µ–±—è –ø–æ–Ω—è—Ç—å, –Ω–æ –Ω–µ –º–æ–≥—É.\nüòì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ö–≤–∞—Ç–∏—Ç –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å –º–µ–Ω—è –¥—É—Ä–∞–∫–æ–º. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å "/menu" –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –∏–≥—Ä–∞–π –≤ –∏–≥—Ä—É, –∫–æ—Ç–æ—Ä—É—é —è –¥–ª—è —Ç–µ–±—è –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª.',
        reply_markup=markups.to_main_menu)


@dp.callback_query_handler(text='user_checkout')
async def user_checkout(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    username = message.from_user.username
    await bot.send_message(message.from_user.id,
                           f'üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n    üîπ {username}\n\nüí∞ –î–µ–Ω—å–≥–∏:\n    üîπ {get_user_money(username)} üíµ\n\nüèÜ –ü–æ–∑–∏—Ü–∏—è –≤ —Å–ø–∏—Å–∫–µ –±–æ–≥–∞—á–µ–π:\n    üîπ {user_in_leaderboard(username)}\n\nüòº –°—Ç–∞–Ω–æ–≤–∏—Å—å –ª—É—á—à–µ.',
                           reply_markup=markups.to_main_menu)


@dp.callback_query_handler(text='to_main_menu')
async def back_to_menu(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    username = message.from_user.username
    await bot.send_message(message.from_user.id, f'üòö –ü—Ä–∏–≤–µ—Ç, –ø—É–ø—Å–∏–∫ {username}! –í–æ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –º–µ–Ω—é:',
                           reply_markup=markups.main_menu)


@dp.callback_query_handler(text='show_leaderboard')
async def show_leaderboard(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    leaderboard = get_leaderboard()
    str_leaderboard = 'üíé –°–∞–º—ã–µ –±–æ–≥–∞—Ç—ã–µ –∏–≥—Ä–æ–∫–∏ üíé\n\n'
    for player_index in range(len(leaderboard[:10])):
        str_leaderboard += f'{player_index + 1}. {leaderboard[player_index][1]}: {leaderboard[player_index][2]} üíµ\n'  # Leaderboard position, then username, then user's money
    str_leaderboard += '\nüòº –õ–∏—à—å —Å–∞–º—ã–µ —É–ø–æ—Ä–Ω—ã–µ, –ø—Ä–µ–¥–ø—Ä–∏–∏–º—á–∏–≤—ã–µ –∏ –≤–µ–∑—É—á–∏–µ —Å–º–æ–≥—É—Ç —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞'
    await bot.send_message(message.from_user.id, str_leaderboard, reply_markup=markups.to_main_menu)


@dp.callback_query_handler(text='to_money_menu')
async def to_money_menu(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    await bot.send_message(message.from_user.id, 'üé∞ –•–æ—á–µ—à—å –æ—â—É—Ç–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–∑–∞—Ä—Ç –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–±—ã–≤–∞–ª—ã–µ –¥–µ–Ω—å–≥–∏, –∞ –Ω–µ –∂–¥–∞—Ç—å –∫–æ–ø–µ–π–∫–∏ –¥–æ—Ö–æ–¥–∞ –æ—Ç –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π? –¢–æ–≥–¥–∞ —Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É!ü§©üí∞\n\nüòâ –ù–æ —É—á—Ç–∏, —á—Ç–æ —Ä–∞–∑–æ—Ä–∏—Ç—å—Å—è –∑–¥–µ—Å—å —Ç–∞–∫–∂–µ –ª–µ–≥–∫–æ, –∫–∞–∫ –∏ —Ä–∞–∑–±–æ–≥–∞—Ç–µ—Ç—å.', reply_markup=markups.gambling_menu)


@dp.callback_query_handler(text='free_bonus')
async def free_bonus(message: types.Message):
    username = message.from_user.username
    if bonus_available(username):
        change_money(username, 2000)
        await bot.send_message(message.from_user.id,
                               '‚úÖ –¢—ã –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å —Ä–∞–∑–º–µ—Ä–æ–º –≤ 2000 üíµ, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é! –ü—Ä–∏—Ö–æ–¥–∏ –µ—â—ë –∑–∞ –æ–¥–Ω–∏–º —á–µ—Ä–µ–∑ –¥–≤–∞ —á–∞—Å–∞üòâ')
    else:
        await bot.send_message(message.from_user.id,
                               "‚ùå –ù–µ–¥–∞–≤–Ω–æ —Ç—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –±–æ–Ω—É—Å, –Ω–µ –Ω–∞–≥–ª–µ–π! –ù–æ–≤—ã–π –±–æ–Ω—É—Å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –¥–≤–∞ —á–∞—Å–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ.")


@dp.callback_query_handler(text='coin_toss_rules')
async def coin_toss_rules(message: types.Message):
    await bot.send_message(message.from_user.id,
                           f'ü™ô –ë—Ä–æ—Å–æ–∫ –º–æ–Ω–µ—Ç—ã, –∑–Ω–∞—á–∏—Ç? –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –í–æ—Ç –ø—Ä–∞–≤–∏–ª–∞:\n–ß—Ç–æ–±—ã –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É, –≤–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É "/coin_toss", –¥–æ–ø–∏—Å–∞—Ç—å –∫ –Ω–µ–π –∏—Å—Ö–æ–¥ –±—Ä–æ—Å–∫–∞ (–æ—Ä—ë–ª/—Ä–µ—à–∫–∞) –∏ —Å—É–º–º—É –≤–∞—à–µ–π —Å—Ç–∞–≤–∫–∏, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç. –í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–æ–º–∞–Ω–¥–∞:\n\n/coin_toss {"–æ—Ä—ë–ª" if randint(0, 1) == 0 else "—Ä–µ—à–∫–∞"} {randint(100, 10000)}\n\n–ü–æ–º–Ω–∏, —á—Ç–æ –Ω–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥, —á–µ–º —É —Ç–µ–±—è –µ—Å—Ç—å. üòâ')


@dp.callback_query_handler(text='to_shop_menu')
async def shop_menu(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    await bot.send_message(message.from_user.id, 'üè¶ –•–æ—á–µ—à—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ –≤–æ —á—Ç–æ-—Ç–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—É—é –ø—Ä–∏–±—ã–ª—å, –∞ –Ω–µ –ø—Ä–æ–∂–∏–≥–∞—Ç—å –∂–∏–∑–Ω—å –∏ –∫–æ—à–µ–ª—ë–∫ –≤ –º—É—Ç–Ω–æ–º –∫–∞–∑–∏–Ω–æ? –¢–æ–≥–¥–∞ —Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É!\n\nüìà –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ ‚Äî –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –∏ —Ä–∞–∑—É–º–Ω—ã–π –≤—ã–±–æ—Ä –∑—Ä–µ–ª–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.',
                           reply_markup=markups.shop_menu)


@dp.callback_query_handler(text='buy_kiosk')
async def buy_kiosk(message: types.Message):
    username = message.from_user.username
    business_func_name = '–∫–∏–æ—Å–∫_—Å_–≥–∞–∑–µ—Ç–∞–º–∏'
    if get_user_money(username) < get_business_price(business_func_name):
        await bot.send_message(message.from_user.id,
                               "‚ùå –ò–∑–≤–∏–Ω–∏, –Ω–æ –¥–µ–Ω–µ–≥ —Ç–µ–±–µ –Ω–∞ —Ç–∞–∫—É—é –ø–æ–∫—É–ø–∫—É –Ω–µ —Ö–≤–∞—Ç–∏—Ç. –í–ª–µ–∑–∞—Ç—å –≤ –¥–æ–ª–≥–∏ —Ç–æ–∂–µ –Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç, —Ç–∞–∫ —á—Ç–æ –ø–æ—É–º–µ—Ä—å —Å–≤–æ–∏ –∞–º–±–∏—Ü–∏–∏ üòâ")
        return None
    try:
        buy_business(username, business_func_name)
        await bot.send_message(message.from_user.id, '‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–∫—É–ø–∫–æ–π –∫–∏–æ—Å–∫–∞ —Å –≥–∞–∑–µ—Ç–∞–º–∏')
    except:
        await bot.send_message(message.from_user.id, '‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å')


@dp.callback_query_handler(text='business_overview')
async def business_overview(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    username = message.from_user.username
    overview = ''
    businesses = get_user_businesses(username)

    for business_name in businesses.keys():
        overview += f'{business_name}: {businesses[business_name]}\n'
    await bot.send_message(message.from_user.id, overview, reply_markup=markups.to_main_menu)


@dp.callback_query_handler(text='check_profit')
async def check_profit(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    username = message.from_user.username
    if not get_user_businesses(username):
        await bot.send_message(message.from_user.id,
                               '‚ùå –î–∞ —É —Ç–µ–±—è –≤–µ–¥—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –Ω–µ—Ç, —á—Ç–æ —ç—Ç–æ —Ç—ã –∑–∞–±—Ä–∞—Ç—å —É–¥—É–º–∞–ª?',
                               reply_markup=markups.to_main_menu)
    else:
        await bot.send_message(message.from_user.id,
                               f'üïì –ó–∞ —Ç–æ –≤—Ä–µ–º—è, —á—Ç–æ –≤–∞—Å –Ω–µ –±—ã–ª–æ, –≤–∞—à–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ –≤–∞–º {check_business_profit(username)} üíµ\n–°–æ–ª–∏–¥–Ω–∞—è —Å—É–º–º–∞! –•–æ—Ç–∏—Ç–µ –µ—ë –∑–∞–±—Ä–∞—Ç—å? üòâ',
                               reply_markup=markups.receive_profit)


@dp.callback_query_handler(text='receive_profit')
async def receive_profit(message: types.Message):
    username = message.from_user.username
    profit = check_business_profit(username)
    if not get_user_businesses(username):
        await bot.send_message(message.from_user.id,
                               '‚ùå –ù–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å –æ—Ç –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π, –Ω–µ –∏–º–µ—è –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∏—Ö. –ù–∞ —á—Ç–æ —Ç—ã –≤–æ–æ–±—â–µ –Ω–∞–¥–µ—è–ª—Å—è?',
                               reply_markup=markups.to_main_menu)
    else:
        receive_business_profit(username)
        await bot.send_message(message.from_user.id,
                               f'‚úÖ –í–∞—à –∫–æ—à–µ–ª—ë–∫ –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ {profit} üíµ –æ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –≤–∞—à–∏–º–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è–º–∏, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!',
                               reply_markup=markups.to_main_menu)


@dp.callback_query_handler(text='roulette_rules')
async def roulette_rules(message: types.Message):
    example_stakes = ["–∫—Ä–∞—Å–Ω–æ–µ", "—á—ë—Ä–Ω–æ–µ", "—á—ë—Ç–Ω–æ–µ", "–Ω–µ—á—ë—Ç–Ω–æ–µ", "1-18", "19-36", "1-12", "13-24", "25-36", *range(37)]
    await bot.send_message(message.from_user.id,
                           f'üî¥‚ö´ –†—É–ª–µ—Ç–∫–∞ ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å –ª—é–±–æ–≥–æ –∫–∞–∑–∏–Ω–æ. –ö—Ä—É—Ç–∞–Ω—ë–º –µ—ë —Ä–∞–∑–æ—á–µ–∫? –í–æ—Ç –ø—Ä–∞–≤–∏–ª–∞:\n\n–ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É, –≤–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É "/roulette", –¥–æ–ø–∏—Å–∞—Ç—å –∫ –Ω–µ–π —Å–µ–∫—Ç–æ—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å—Ç–∞–≤–∏—Ç–µ –∏ —Å—É–º–º—É –≤–∞—à–µ–π —Å—Ç–∞–≤–∫–∏, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–µ–∫—Ç–æ—Ä–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏: "–∫—Ä–∞—Å–Ω–æ–µ", "—á—ë—Ä–Ω–æ–µ", "—á—ë—Ç–Ω–æ–µ", "–Ω–µ—á—ë—Ç–Ω–æ–µ", "1-18", "19-36", "1-12", "13-24", "25-36", –æ–¥–Ω–æ –ª—é–±–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 36.\n–í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–æ–º–∞–Ω–¥–∞:\n\n/roulette {choice(example_stakes)} {randint(100, 10000)}\n\n–ü–æ–º–Ω–∏, —á—Ç–æ –Ω–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥, —á–µ–º —É —Ç–µ–±—è –µ—Å—Ç—å. üòâ')


if __name__ == '__main__':
    executor.start_polling(dp)
