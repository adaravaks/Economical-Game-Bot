from decouple import config
from time import sleep
from random import randint, choice
from aiogram import Bot, Dispatcher, executor, types
from database_handler import add_user, user_exists, get_user_money, get_leaderboard, user_in_leaderboard, \
    bonus_available, change_money, get_business_price, buy_business, get_user_businesses, check_business_profit, \
    receive_business_profit, get_business_price_and_profit_by_funcname, calculate_business_profit
import markups

bot = Bot(token=config('TOKEN'))
dp = Dispatcher(bot=bot)


@dp.message_handler(commands='start')
async def start(message: types.Message):
    username = message.from_user.username
    if not user_exists(username):
        add_user(username, money=0)
        await message.answer('–Ø –¥–æ–±–∞–≤–∏–ª —Ç–µ–±—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ù–µ –≤–æ–∑—Ä–∞–∂–∞–µ—à—å, –≤–µ–¥—å? –í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–æ!')
    else:
        await message.answer(f'–¢—ã —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')

    await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É, {username}', reply_markup=markups.main_menu)


@dp.message_handler(commands='menu')
async def start(message: types.Message):
    username = message.from_user.username
    await message.answer(f'üòö –ü—Ä–∏–≤–µ—Ç, –ø—É–ø—Å–∏–∫ {username}! –í–æ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –º–µ–Ω—é:',
                         reply_markup=markups.main_menu)


@dp.message_handler(commands='coin_toss')
async def coin_toss(message: types.Message):
    username = message.from_user.username
    msg_words = message.text.split()
    try:
        stake_money = int(msg_words[-1])
        if len(msg_words) == 3 and (msg_words[1] == '–æ—Ä—ë–ª' or msg_words[1] == '—Ä–µ—à–∫–∞'):
            if stake_money > get_user_money(username):
                await message.reply(
                    f"‚ùå –ò–∑–≤–∏–Ω–∏, –Ω–æ –¥–µ–Ω–µ–≥ —Ç–µ–±–µ –Ω–∞ —Ç–∞–∫—É—é —Å—Ç–∞–≤–∫—É –Ω–µ —Ö–≤–∞—Ç–∏—Ç. –í–ª–µ–∑–∞—Ç—å –≤ –¥–æ–ª–≥–∏ —Ç–æ–∂–µ –Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç, —Ç–∞–∫ —á—Ç–æ –ø–æ—É–º–µ—Ä—å —Å–≤–æ–∏ –∞–º–±–∏—Ü–∏–∏")
                return None  # Read as "break"

            stake_outcome = msg_words[1]
            outcome = "–æ—Ä—ë–ª" if randint(0, 1) == 0 else "—Ä–µ—à–∫–∞"
            if stake_outcome == outcome:
                change_money(username, stake_money)
                await message.reply(
                    f"ü•≥ –£—Ä–∞, –ø–æ–±–µ–¥–∞!\n\n–ò—Å—Ö–æ–¥ –ø–∞–¥–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã ‚Äî {outcome}.\n\n–í —Ç–≤–æ—ë–º –∫–æ—à–µ–ª—å–∫–µ –≤–Ω–µ–∑–∞–ø–Ω–æ –æ–∫–∞–∑–∞–ª–∏—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ {stake_money} üíµ.\n–ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —É–¥–∞—á–∞ —Ç–µ–±—è –Ω–µ –ø–æ–¥–≤–µ–¥—ë—Ç, –º–æ–∂–µ—à—å –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É –µ—â—ë —Ä–∞–∑–æ–∫.",
                    reply_markup=markups.to_menus)
            else:
                change_money(username, -stake_money)
                await message.reply(
                    f"üò∞ –ö–∞–∫–∞—è –¥–æ—Å–∞–¥–∞!\n\n–ò—Å—Ö–æ–¥ –ø–∞–¥–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã ‚Äî {outcome}.\n\n–¢–≤–æ–∏ {stake_money} üíµ –≤–Ω–µ–∑–∞–ø–Ω–æ –ø—Ä–æ–ø–∞–ª–∏ –∏–∑ –∫–æ—à–µ–ª—å–∫–∞.\n–ú–æ–∂–µ—Ç, –ø–æ–ª—É—á–∏—Ç—Å—è –æ—Ç—ã–≥—Ä–∞—Ç—å—Å—è, –µ—Å–ª–∏ –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É –µ—â—ë —Ä–∞–∑–æ–∫, —Ö–æ—Ç—è, —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –º–æ–∂–Ω–æ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –µ—â—ë –±–æ–ª—å—à–µ. –í—ã–±–æ—Ä –∑–∞ —Ç–æ–±–æ–π.",
                    reply_markup=markups.to_menus)
        else:
            await message.reply(
                f'–° —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –í–æ—Ç –∫–∞–∫ –µ—ë –Ω–∞–¥–æ –≤–≤–æ–¥–∏—Ç—å:\n/coin_toss <–æ—Ä—ë–ª/—Ä–µ—à–∫–∞> <—Ç–≤–æ—è —Å—Ç–∞–≤–∫–∞>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n/coin_toss {"–æ—Ä—ë–ª" if randint(0, 1) == 0 else "—Ä–µ—à–∫–∞"} {randint(100, 10000)}',
                reply_markup=markups.to_menus)
    except:
        await message.reply(
            f'–° —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –í–æ—Ç –∫–∞–∫ –µ—ë –Ω–∞–¥–æ –≤–≤–æ–¥–∏—Ç—å:\n/coin_toss <–æ—Ä—ë–ª/—Ä–µ—à–∫–∞> <—Ç–≤–æ—è —Å—Ç–∞–≤–∫–∞>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n/coin_toss {"–æ—Ä—ë–ª" if randint(0, 1) == 0 else "—Ä–µ—à–∫–∞"} {randint(100, 10000)}',
            reply_markup=markups.to_menus)


@dp.message_handler(commands='roulette')
async def roulette(message: types.Message):
    username = message.from_user.username
    msg_words = message.text.split()
    possible_outcomes = ["–∫—Ä–∞—Å–Ω–æ–µ", "—á—ë—Ä–Ω–æ–µ", "—á—ë—Ç–Ω–æ–µ", "–Ω–µ—á—ë—Ç–Ω–æ–µ", "1-18", "19-36", "1-12", "13-24", "25-36"] + [str(i) for i in range(37)]
    try:
        stake_money = int(msg_words[-1])
        if len(msg_words) == 3 and (msg_words[1] in possible_outcomes):
            if stake_money > get_user_money(username):
                await message.reply(
                    f"‚ùå –ò–∑–≤–∏–Ω–∏, –Ω–æ –¥–µ–Ω–µ–≥ —Ç–µ–±–µ –Ω–∞ —Ç–∞–∫—É—é —Å—Ç–∞–≤–∫—É –Ω–µ —Ö–≤–∞—Ç–∏—Ç. –í–ª–µ–∑–∞—Ç—å –≤ –¥–æ–ª–≥–∏ —Ç–æ–∂–µ –Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç, —Ç–∞–∫ —á—Ç–æ –ø–æ—É–º–µ—Ä—å —Å–≤–æ–∏ –∞–º–±–∏—Ü–∏–∏")
                return None

            stake_outcome = msg_words[1]
            outcome_number = randint(0, 36)

            outcome_color = '–∫—Ä–∞—Å–Ω–æ–µ' if outcome_number % 2 != 0 else '—á—ë—Ä–Ω–æ–µ'
            outcome_emoji = 'üî¥' if outcome_number % 2 != 0 else '‚ö´'
            outcome_oddeven = '—á—ë—Ç–Ω–æ–µ' if outcome_number % 2 == 0 else '–Ω–µ—á—ë—Ç–Ω–æ–µ'
            if outcome_number == 0:
                outcome_color = '–∑–µ–ª—ë–Ω–æ–µ'
                outcome_emoji = 'üü¢'

            if outcome_number in range(1, 19):
                outcome_half = '1-18'
            elif outcome_number in range(19, 37):
                outcome_half = '19-36'
            else:
                outcome_half = None

            if outcome_number in range(1, 13):
                outcome_third = '1-12'
            elif outcome_number in range(13, 25):
                outcome_third = '13-24'
            elif outcome_number in range(25, 37):
                outcome_third = '25-36'
            else:
                outcome_third = None

            outcome = 'Win'
            if stake_outcome == outcome_color or stake_outcome == outcome_oddeven or stake_outcome == outcome_half:
                money_multiplier = 2
            elif stake_outcome == outcome_third:
                money_multiplier = 3
            elif stake_outcome == str(outcome_number):
                money_multiplier = 36
            else:
                outcome = 'Loss'
                money_multiplier = -1

            new_money = stake_money * money_multiplier
            change_money(username, new_money)
            if outcome == 'Win':
                await message.reply(
                    f'ü•≥ –£—Ä–∞, –ø–æ–±–µ–¥–∞!\n\n –®–∞—Ä–∏–∫ —Ä—É–ª–µ—Ç–∫–∏ —É–ø–∞–ª –Ω–∞:\n{outcome_emoji}  {outcome_number},  {outcome_oddeven}\n\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª, –ø–æ—Å—Ç–∞–≤–∏–≤ –Ω–∞ {stake_outcome}, –ø–æ—ç—Ç–æ–º—É —Ç–≤–æ—è —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Ç–µ–±–µ –≤ {str(money_multiplier)+"-—Ö" if money_multiplier != 36 else str(money_multiplier)+"-–∏"} –∫—Ä–∞—Ç–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ.\n–í —Ç–≤–æ—ë–º –∫–æ—à–µ–ª—å–∫–µ –≤–Ω–µ–∑–∞–ø–Ω–æ –æ–∫–∞–∑–∞–ª–∏—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ {(stake_money * money_multiplier) - stake_money} üíµ.\n–ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —É–¥–∞—á–∞ —Ç–µ–±—è –Ω–µ –ø–æ–¥–≤–µ–¥—ë—Ç, –º–æ–∂–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É –µ—â—ë —Ä–∞–∑–æ–∫.',
                    reply_markup=markups.to_menus)
            else:
                await message.reply(
                    f"üò∞ –ö–∞–∫–∞—è –¥–æ—Å–∞–¥–∞!\n\n –®–∞—Ä–∏–∫ —Ä—É–ª–µ—Ç–∫–∏ —É–ø–∞–ª –Ω–∞:\n{outcome_emoji} {outcome_number}, {outcome_oddeven}\n\n–¢–≤–æ–∏ {stake_money} üíµ –≤–Ω–µ–∑–∞–ø–Ω–æ –ø—Ä–æ–ø–∞–ª–∏ –∏–∑ –∫–æ—à–µ–ª—å–∫–∞.\n–ú–æ–∂–µ—Ç, –ø–æ–ª—É—á–∏—Ç—Å—è –æ—Ç—ã–≥—Ä–∞—Ç—å—Å—è, –µ—Å–ª–∏ —Å—ã–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É –µ—â—ë —Ä–∞–∑–æ–∫, —Ö–æ—Ç—è, —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –º–æ–∂–Ω–æ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –µ—â—ë –±–æ–ª—å—à–µ. –í—ã–±–æ—Ä –∑–∞ —Ç–æ–±–æ–π.",
                    reply_markup=markups.to_menus)
        else:
            await message.reply(
                f'–° —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –í–æ—Ç –∫–∞–∫ –µ—ë –Ω–∞–¥–æ –≤–≤–æ–¥–∏—Ç—å:\n/roulette <—Å–µ–∫—Ç–æ—Ä —Å—Ç–∞–≤–∫–∏> <—Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n/roulette {choice(possible_outcomes)} {randint(100, 10000)}\n\n –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–µ–∫—Ç–æ—Ä–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏: "–∫—Ä–∞—Å–Ω–æ–µ", "—á—ë—Ä–Ω–æ–µ", "—á—ë—Ç–Ω–æ–µ", "–Ω–µ—á—ë—Ç–Ω–æ–µ", "1-18", "19-36", "1-12", "13-24", "25-36", –æ–¥–Ω–æ –ª—é–±–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 36.',
                reply_markup=markups.to_menus)
    except:
        await message.reply(
            f'–° —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –í–æ—Ç –∫–∞–∫ –µ—ë –Ω–∞–¥–æ –≤–≤–æ–¥–∏—Ç—å:\n/roulette <—Å–µ–∫—Ç–æ—Ä —Å—Ç–∞–≤–∫–∏> <—Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n/roulette {choice(possible_outcomes)} {randint(100, 10000)}\n\n –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–µ–∫—Ç–æ—Ä–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏: "–∫—Ä–∞—Å–Ω–æ–µ", "—á—ë—Ä–Ω–æ–µ", "—á—ë—Ç–Ω–æ–µ", "–Ω–µ—á—ë—Ç–Ω–æ–µ", "1-18", "19-36", "1-12", "13-24", "25-36", –æ–¥–Ω–æ –ª—é–±–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 36.',
            reply_markup=markups.to_menus)


@dp.message_handler(commands='dice')
async def dice(message: types.Message):
    username = message.from_user.username
    msg_words = message.text.split()
    try:
        stake_money = int(msg_words[-1])
        if len(msg_words) == 3 and int(msg_words[1]) in range(1, 7):
            if stake_money > get_user_money(username):
                await message.reply(
                    f"‚ùå –ò–∑–≤–∏–Ω–∏, –Ω–æ –¥–µ–Ω–µ–≥ —Ç–µ–±–µ –Ω–∞ —Ç–∞–∫—É—é —Å—Ç–∞–≤–∫—É –Ω–µ —Ö–≤–∞—Ç–∏—Ç. –í–ª–µ–∑–∞—Ç—å –≤ –¥–æ–ª–≥–∏ —Ç–æ–∂–µ –Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç, —Ç–∞–∫ —á—Ç–æ –ø–æ—É–º–µ—Ä—å —Å–≤–æ–∏ –∞–º–±–∏—Ü–∏–∏")
                return None

            stake_outcome = int(msg_words[1])
            outcome_raw = await message.answer_dice()
            outcome = outcome_raw['dice']['value']
            sleep(5)
            if stake_outcome == outcome:
                change_money(username, (5 * stake_money))
                await message.reply(
                    f"ü•≥ –£—Ä–∞, –ø–æ–±–µ–¥–∞!\n\n–ò—Å—Ö–æ–¥ –ø–∞–¥–µ–Ω–∏—è –∫–æ—Å—Ç–µ–π ‚Äî {outcome}.\n\n–í —Ç–≤–æ—ë–º –∫–æ—à–µ–ª—å–∫–µ –≤–Ω–µ–∑–∞–ø–Ω–æ –æ–∫–∞–∑–∞–ª–∏—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ {5 * stake_money} üíµ.\n–ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —É–¥–∞—á–∞ —Ç–µ–±—è –Ω–µ –ø–æ–¥–≤–µ–¥—ë—Ç, –º–æ–∂–µ—à—å –±—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑–æ–∫.",
                    reply_markup=markups.to_menus)
            else:
                change_money(username, -stake_money)
                await message.reply(
                    f"üò∞ –ö–∞–∫–∞—è –¥–æ—Å–∞–¥–∞!\n\n –ò—Å—Ö–æ–¥ –ø–∞–¥–µ–Ω–∏—è –∫–æ—Å—Ç–µ–π ‚Äî {outcome}.\n\n–¢–≤–æ–∏ {stake_money} üíµ –≤–Ω–µ–∑–∞–ø–Ω–æ –ø—Ä–æ–ø–∞–ª–∏ –∏–∑ –∫–æ—à–µ–ª—å–∫–∞.\n–ú–æ–∂–µ—Ç, –ø–æ–ª—É—á–∏—Ç—Å—è –æ—Ç—ã–≥—Ä–∞—Ç—å—Å—è, –µ—Å–ª–∏ –±—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑–æ–∫, —Ö–æ—Ç—è, —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –º–æ–∂–Ω–æ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –µ—â—ë –±–æ–ª—å—à–µ. –í—ã–±–æ—Ä –∑–∞ —Ç–æ–±–æ–π.",
                    reply_markup=markups.to_menus)
        else:
            await message.reply(
                f'–° —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –í–æ—Ç –∫–∞–∫ –µ—ë –Ω–∞–¥–æ –≤–≤–æ–¥–∏—Ç—å:\n/dice <—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6> <—Ç–≤–æ—è —Å—Ç–∞–≤–∫–∞>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n/dice {randint(1, 6)} {randint(100, 10000)}',
                reply_markup=markups.to_menus)
    except:
        await message.reply(
            f'–° —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –í–æ—Ç –∫–∞–∫ –µ—ë –Ω–∞–¥–æ –≤–≤–æ–¥–∏—Ç—å:\n/dice <—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6> <—Ç–≤–æ—è —Å—Ç–∞–≤–∫–∞>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n/dice {randint(1, 6)} {randint(100, 10000)}',
            reply_markup=markups.to_menus)


@dp.message_handler(commands='darts')
async def darts(message: types.Message):
    username = message.from_user.username
    msg_words = message.text.split()
    try:
        stake_money = int(msg_words[-1])
        if len(msg_words) == 2:
            if stake_money > get_user_money(username):
                await message.reply(
                    f"‚ùå –ò–∑–≤–∏–Ω–∏, –Ω–æ –¥–µ–Ω–µ–≥ —Ç–µ–±–µ –Ω–∞ —Ç–∞–∫—É—é —Å—Ç–∞–≤–∫—É –Ω–µ —Ö–≤–∞—Ç–∏—Ç. –í–ª–µ–∑–∞—Ç—å –≤ –¥–æ–ª–≥–∏ —Ç–æ–∂–µ –Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç, —Ç–∞–∫ —á—Ç–æ –ø–æ—É–º–µ—Ä—å —Å–≤–æ–∏ –∞–º–±–∏—Ü–∏–∏")
                return None

            outcome_raw = await message.answer_dice(emoji='üéØ')
            outcome = outcome_raw['dice']['value']
            sleep(4)

            if int(outcome) == 6:
                change_money(username, (5 * stake_money))
                await message.reply(
                    f"ü•≥ –ß—ë—Ç–∫–æ –≤ —è–±–ª–æ—á–∫–æ!.\n\n–í —Ç–≤–æ—ë–º –∫–æ—à–µ–ª—å–∫–µ –≤–Ω–µ–∑–∞–ø–Ω–æ –æ–∫–∞–∑–∞–ª–∏—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ {5 * stake_money} üíµ.\n–ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —É–¥–∞—á–∞ —Ç–µ–±—è –Ω–µ –ø–æ–¥–≤–µ–¥—ë—Ç, –º–æ–∂–µ—à—å –±—Ä–æ—Å–∏—Ç—å –¥—Ä–æ—Ç–∏–∫ –µ—â—ë —Ä–∞–∑–æ–∫.",
                    reply_markup=markups.to_menus)
            else:
                change_money(username, -stake_money)
                await message.reply(
                    f"üò∞ –ú–∏–º–æ —Ü–µ–ª–∏!\n\n–¢–≤–æ–∏ {stake_money} üíµ –≤–Ω–µ–∑–∞–ø–Ω–æ –ø—Ä–æ–ø–∞–ª–∏ –∏–∑ –∫–æ—à–µ–ª—å–∫–∞.\n–ú–æ–∂–µ—Ç, –ø–æ–ª—É—á–∏—Ç—Å—è –æ—Ç—ã–≥—Ä–∞—Ç—å—Å—è, –µ—Å–ª–∏ –±—Ä–æ—Å–∏—Ç—å –¥—Ä–æ—Ç–∏–∫ –µ—â—ë —Ä–∞–∑–æ–∫, —Ö–æ—Ç—è, —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –º–æ–∂–Ω–æ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –µ—â—ë –±–æ–ª—å—à–µ. –í—ã–±–æ—Ä –∑–∞ —Ç–æ–±–æ–π.",
                    reply_markup=markups.to_menus)
        else:
            await message.reply(
                f'–° —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –í–æ—Ç –∫–∞–∫ –µ—ë –Ω–∞–¥–æ –≤–≤–æ–¥–∏—Ç—å:\n/darts <—Ç–≤–æ—è —Å—Ç–∞–≤–∫–∞>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n/darts {randint(100, 10000)}',
                reply_markup=markups.to_menus)
    except:
        await message.reply(
            f'–° —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –í–æ—Ç –∫–∞–∫ –µ—ë –Ω–∞–¥–æ –≤–≤–æ–¥–∏—Ç—å:\n/darts <—Ç–≤–æ—è —Å—Ç–∞–≤–∫–∞>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n/darts {randint(100, 10000)}',
            reply_markup=markups.to_menus)


@dp.message_handler(commands='soccer')
async def darts(message: types.Message):
    username = message.from_user.username
    msg_words = message.text.split()
    try:
        stake_money = int(msg_words[-1])
        if len(msg_words) == 2:
            if stake_money > get_user_money(username):
                await message.reply(
                    f"‚ùå –ò–∑–≤–∏–Ω–∏, –Ω–æ –¥–µ–Ω–µ–≥ —Ç–µ–±–µ –Ω–∞ —Ç–∞–∫—É—é —Å—Ç–∞–≤–∫—É –Ω–µ —Ö–≤–∞—Ç–∏—Ç. –í–ª–µ–∑–∞—Ç—å –≤ –¥–æ–ª–≥–∏ —Ç–æ–∂–µ –Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç, —Ç–∞–∫ —á—Ç–æ –ø–æ—É–º–µ—Ä—å —Å–≤–æ–∏ –∞–º–±–∏—Ü–∏–∏")
                return None

            outcome_raw = await message.answer_dice(emoji='‚öΩ')
            outcome = outcome_raw['dice']['value']
            sleep(5)

            if int(outcome) in [3, 4, 5]:
                change_money(username, (int(1.66 * stake_money)))
                await message.reply(
                    f"ü•≥ –ì–æ–ª!.\n\n–í —Ç–≤–æ—ë–º –∫–æ—à–µ–ª—å–∫–µ –≤–Ω–µ–∑–∞–ø–Ω–æ –æ–∫–∞–∑–∞–ª–∏—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ {int(1.66 * stake_money)} üíµ.\n–ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —É–¥–∞—á–∞ —Ç–µ–±—è –Ω–µ –ø–æ–¥–≤–µ–¥—ë—Ç, –º–æ–∂–µ—à—å –ø–Ω—É—Ç—å –º—è—á –µ—â—ë —Ä–∞–∑–æ–∫.",
                    reply_markup=markups.to_menus)
            else:
                change_money(username, -stake_money)
                await message.reply(
                    f"üò∞ –ú–∏–º–æ!\n\n–¢–≤–æ–∏ {stake_money} üíµ –≤–Ω–µ–∑–∞–ø–Ω–æ –ø—Ä–æ–ø–∞–ª–∏ –∏–∑ –∫–æ—à–µ–ª—å–∫–∞.\n–ú–æ–∂–µ—Ç, –ø–æ–ª—É—á–∏—Ç—Å—è –æ—Ç—ã–≥—Ä–∞—Ç—å—Å—è, –µ—Å–ª–∏ –ø–Ω—É—Ç—å –º—è—á –µ—â—ë —Ä–∞–∑–æ–∫, —Ö–æ—Ç—è, —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –º–æ–∂–Ω–æ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –µ—â—ë –±–æ–ª—å—à–µ. –í—ã–±–æ—Ä –∑–∞ —Ç–æ–±–æ–π.",
                    reply_markup=markups.to_menus)
        else:
            await message.reply(
                f'–° —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –í–æ—Ç –∫–∞–∫ –µ—ë –Ω–∞–¥–æ –≤–≤–æ–¥–∏—Ç—å:\n/soccer <—Ç–≤–æ—è —Å—Ç–∞–≤–∫–∞>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n/soccer {randint(100, 10000)}',
                reply_markup=markups.to_menus)
    except:
        await message.reply(
            f'–° —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –í–æ—Ç –∫–∞–∫ –µ—ë –Ω–∞–¥–æ –≤–≤–æ–¥–∏—Ç—å:\n/soccer <—Ç–≤–æ—è —Å—Ç–∞–≤–∫–∞>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n/soccer {randint(100, 10000)}',
            reply_markup=markups.to_menus)


@dp.message_handler(commands='dices')
async def darts(message: types.Message):
    outcome = await message.answer_dice(emoji='üèÄ')
    sleep(5)
    await message.answer(f'–ò—Å—Ö–æ–¥ ‚Äî {outcome["dice"]["value"]}')


@dp.message_handler()
async def other(message: types.Message):
    await message.reply(
        '–Ø –∏–∑–æ –≤—Å–µ—Ö —Å–∏–ª –ø—ã—Ç–∞—é—Å—å —Ç–µ–±—è –ø–æ–Ω—è—Ç—å, –Ω–æ –Ω–µ –º–æ–≥—É.\nüòì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ö–≤–∞—Ç–∏—Ç –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å –º–µ–Ω—è –¥—É—Ä–∞–∫–æ–º. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å "/menu" –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –∏–≥—Ä–∞–π –≤ –∏–≥—Ä—É, –∫–æ—Ç–æ—Ä—É—é —è –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª.',
        reply_markup=markups.to_main_menu)


@dp.callback_query_handler(text='user_checkout')
async def user_checkout(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    username = message.from_user.username
    await bot.send_message(message.from_user.id,
                           f'üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n    üîπ {username}\n\nüí∞ –î–µ–Ω—å–≥–∏:\n    üîπ {get_user_money(username)} üíµ\n\nüèÜ –ü–æ–∑–∏—Ü–∏—è –≤ —Å–ø–∏—Å–∫–µ –±–æ–≥–∞—á–µ–π:\n    üîπ {user_in_leaderboard(username)}\n\nüòº –°—Ç–∞–Ω–æ–≤–∏—Å—å –ª—É—á—à–µ.',
                           reply_markup=markups.to_main_menu)


@dp.callback_query_handler(text='to_main_menu')
async def back_to_menu(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    username = message.from_user.username
    await bot.send_message(message.from_user.id, f'üòö –ü—Ä–∏–≤–µ—Ç, –ø—É–ø—Å–∏–∫ {username}! –í–æ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –º–µ–Ω—é:',
                           reply_markup=markups.main_menu)


@dp.callback_query_handler(text='show_leaderboard')
async def show_leaderboard(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    leaderboard = get_leaderboard()
    str_leaderboard = 'üíé –°–∞–º—ã–µ –±–æ–≥–∞—Ç—ã–µ –∏–≥—Ä–æ–∫–∏ üíé\n\n'
    for player_index in range(len(leaderboard[:10])):
        str_leaderboard += f'üîπ  {player_index + 1}. {leaderboard[player_index][1]}: {leaderboard[player_index][2]} üíµ\n'  # Leaderboard position, then username, then user's money
    str_leaderboard += '\nüòº –õ–∏—à—å —Å–∞–º—ã–µ —É–ø–æ—Ä–Ω—ã–µ, –ø—Ä–µ–¥–ø—Ä–∏–∏–º—á–∏–≤—ã–µ –∏ –≤–µ–∑—É—á–∏–µ —Å–º–æ–≥—É—Ç —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞'
    await bot.send_message(message.from_user.id, str_leaderboard, reply_markup=markups.to_main_menu)


@dp.callback_query_handler(text='to_gambling_menu')
async def to_money_menu(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    await bot.send_message(message.from_user.id, 'üé∞ –•–æ—á–µ—à—å –æ—â—É—Ç–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–∑–∞—Ä—Ç –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–±—ã–≤–∞–ª—ã–µ –¥–µ–Ω—å–≥–∏, –∞ –Ω–µ –∂–¥–∞—Ç—å –∫–æ–ø–µ–π–∫–∏ –¥–æ—Ö–æ–¥–∞ –æ—Ç –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π? –¢–æ–≥–¥–∞ —Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É!ü§©üí∞\n\nüòâ –ù–æ —É—á—Ç–∏, —á—Ç–æ —Ä–∞–∑–æ—Ä–∏—Ç—å—Å—è –∑–¥–µ—Å—å —Ç–∞–∫–∂–µ –ª–µ–≥–∫–æ, –∫–∞–∫ –∏ —Ä–∞–∑–±–æ–≥–∞—Ç–µ—Ç—å.', reply_markup=markups.gambling_menu)


@dp.callback_query_handler(text='free_bonus')
async def free_bonus(message: types.Message):
    username = message.from_user.username
    if bonus_available(username):
        change_money(username, 2000)
        await bot.send_message(message.from_user.id,
                               '‚úÖ –¢—ã –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å —Ä–∞–∑–º–µ—Ä–æ–º –≤ 2000 üíµ, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é! –ü—Ä–∏—Ö–æ–¥–∏ –µ—â—ë –∑–∞ –æ–¥–Ω–∏–º —á–µ—Ä–µ–∑ –¥–≤–∞ —á–∞—Å–∞üòâ')
    else:
        await bot.send_message(message.from_user.id,
                               "‚ùå –ù–µ–¥–∞–≤–Ω–æ —Ç—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –±–æ–Ω—É—Å, –Ω–µ –Ω–∞–≥–ª–µ–π! –ù–æ–≤—ã–π –±–æ–Ω—É—Å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –¥–≤–∞ —á–∞—Å–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ.")


@dp.callback_query_handler(text='coin_toss_rules')
async def coin_toss_rules(message: types.Message):
    await bot.send_message(message.from_user.id,
                           f'ü™ô –ë—Ä–æ—Å–æ–∫ –º–æ–Ω–µ—Ç—ã, –∑–Ω–∞—á–∏—Ç? –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –í–æ—Ç –ø—Ä–∞–≤–∏–ª–∞:\n\n–ß—Ç–æ–±—ã –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É "/coin_toss", –¥–æ–ø–∏—Å–∞—Ç—å –∫ –Ω–µ–π –∏—Å—Ö–æ–¥ –±—Ä–æ—Å–∫–∞ (–æ—Ä—ë–ª/—Ä–µ—à–∫–∞) –∏ —Å—É–º–º—É —Ç–≤–æ–µ–π —Å—Ç–∞–≤–∫–∏, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç.\n–í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–æ–º–∞–Ω–¥–∞:\n\n/coin_toss {"–æ—Ä—ë–ª" if randint(0, 1) == 0 else "—Ä–µ—à–∫–∞"} {randint(100, 10000)}\n\n–ü–æ–º–Ω–∏, —á—Ç–æ –Ω–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥, —á–µ–º —É —Ç–µ–±—è –µ—Å—Ç—å. üòâ')


@dp.callback_query_handler(text='to_shop_menu')
async def shop_menu(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    await bot.send_message(message.from_user.id, 'üè¶ –•–æ—á–µ—à—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ –≤–æ —á—Ç–æ-—Ç–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—É—é –ø—Ä–∏–±—ã–ª—å, –∞ –Ω–µ –ø—Ä–æ–∂–∏–≥–∞—Ç—å –∂–∏–∑–Ω—å –∏ –∫–æ—à–µ–ª—ë–∫ –≤ –º—É—Ç–Ω–æ–º –∫–∞–∑–∏–Ω–æ? –¢–æ–≥–¥–∞ —Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É!\n\nüìà –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ ‚Äî –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –∏ —Ä–∞–∑—É–º–Ω—ã–π –≤—ã–±–æ—Ä –∑—Ä–µ–ª–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.',
                           reply_markup=markups.shop_menu)


@dp.callback_query_handler(text='check_kiosk')
async def check_kiosk(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    await bot.send_message(message.from_user.id, f'üîµ  üóû –ö–∏–æ—Å–∫ —Å –≥–∞–∑–µ—Ç–∞–º–∏ ‚Äî –≤—ã–≥–æ–¥–Ω–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç—ã –µ—â—ë —Ç–æ–ª—å–∫–æ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ —Ç–≤–æ–µ–≥–æ –ø—É—Ç–∏ –∫ –æ–±–æ–≥–∞—â–µ–Ω–∏—é.\n\n  üîπ –¶–µ–Ω–∞: {get_business_price_and_profit_by_funcname("–∫–∏–æ—Å–∫_—Å_–≥–∞–∑–µ—Ç–∞–º–∏")[0]} üíµ\n  üîπ –ü—Ä–∏–±—ã–ª—å: {get_business_price_and_profit_by_funcname("–∫–∏–æ—Å–∫_—Å_–≥–∞–∑–µ—Ç–∞–º–∏")[1]} üíµ / —á–∞—Å\n\n –ö—É–ø–∏—Ç—å?', reply_markup=markups.buy_kiosk)


@dp.callback_query_handler(text='buy_kiosk')
async def buy_kiosk(message: types.Message):
    username = message.from_user.username
    business_func_name = '–∫–∏–æ—Å–∫_—Å_–≥–∞–∑–µ—Ç–∞–º–∏'
    if get_user_money(username) < get_business_price(business_func_name):
        await bot.send_message(message.from_user.id,
                               "‚ùå –ò–∑–≤–∏–Ω–∏, –Ω–æ –¥–µ–Ω–µ–≥ —Ç–µ–±–µ –Ω–∞ —Ç–∞–∫—É—é –ø–æ–∫—É–ø–∫—É –Ω–µ —Ö–≤–∞—Ç–∏—Ç. –í–ª–µ–∑–∞—Ç—å –≤ –¥–æ–ª–≥–∏ —Ç–æ–∂–µ –Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç, —Ç–∞–∫ —á—Ç–æ –ø–æ—É–º–µ—Ä—å —Å–≤–æ–∏ –∞–º–±–∏—Ü–∏–∏ üòâ")
        return None
    try:
        buy_business(username, business_func_name)
        await bot.send_message(message.from_user.id, '‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–∫—É–ø–∫–æ–π –∫–∏–æ—Å–∫–∞ —Å –≥–∞–∑–µ—Ç–∞–º–∏! ü•≥')
    except:
        await bot.send_message(message.from_user.id, '‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å')


@dp.callback_query_handler(text='check_apiary')
async def check_apiary(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    await bot.send_message(message.from_user.id, f'üîµ  üçØ –ü—á–µ–ª–∏–Ω–∞—è –ø–∞—Å–µ–∫–∞ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∫–∞—Ä–º–∞–Ω—ã –ª–∏–±–æ –¥–µ–Ω—å–≥–∞–º–∏, –ª–∏–±–æ –º—ë–¥–æ–º ‚Äî —Å–º–æ—Ç—Ä—è —á—Ç–æ –±–æ–ª—å—à–µ –ø–æ –¥—É—à–µ. –ù–æ —Ç–µ–±–µ –≤–µ–¥—å –ø–æ –¥—É—à–µ –¥–µ–Ω—å–≥–∏, –¥–∞? üòâ\n\n  üîπ –¶–µ–Ω–∞: {get_business_price_and_profit_by_funcname("–ø—á–µ–ª–∏–Ω–∞—è_–ø–∞—Å–µ–∫–∞")[0]} üíµ\n  üîπ –ü—Ä–∏–±—ã–ª—å: {get_business_price_and_profit_by_funcname("–ø—á–µ–ª–∏–Ω–∞—è_–ø–∞—Å–µ–∫–∞")[1]} üíµ / —á–∞—Å\n\n –ö—É–ø–∏—Ç—å?', reply_markup=markups.buy_apiary)


@dp.callback_query_handler(text='buy_apiary')
async def buy_apiary(message: types.Message):
    username = message.from_user.username
    business_func_name = '–ø—á–µ–ª–∏–Ω–∞—è_–ø–∞—Å–µ–∫–∞'
    if get_user_money(username) < get_business_price(business_func_name):
        await bot.send_message(message.from_user.id,
                               "‚ùå –ò–∑–≤–∏–Ω–∏, –Ω–æ –¥–µ–Ω–µ–≥ —Ç–µ–±–µ –Ω–∞ —Ç–∞–∫—É—é –ø–æ–∫—É–ø–∫—É –Ω–µ —Ö–≤–∞—Ç–∏—Ç. –í–ª–µ–∑–∞—Ç—å –≤ –¥–æ–ª–≥–∏ —Ç–æ–∂–µ –Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç, —Ç–∞–∫ —á—Ç–æ –ø–æ—É–º–µ—Ä—å —Å–≤–æ–∏ –∞–º–±–∏—Ü–∏–∏ üòâ")
        return None
    try:
        buy_business(username, business_func_name)
        await bot.send_message(message.from_user.id, '‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–∫—É–ø–∫–æ–π –ø—á–µ–ª–∏–Ω–æ–π –ø–∞—Å–µ–∫–∏! ü•≥')
    except:
        await bot.send_message(message.from_user.id, '‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å')


@dp.callback_query_handler(text='check_carwash')
async def check_carwash(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    await bot.send_message(message.from_user.id, f'üîµ  üöóüßº –ê–≤—Ç–æ–º–æ–π–∫–∞ –ø–æ–º–æ–≥–∞–ª–∞ –£–æ–ª—Ç–µ—Ä—É –£–∞–π—Ç—É –∏–∑ "–í–æ –≤—Å–µ —Ç—è–∂–∫–∏–µ" –æ—Ç–º—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏, –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –º–µ—Ç–∞–º—Ñ–µ—Ç–∞–º–∏–Ω–∞. –ù–∞–º –¥–æ –Ω–µ–≥–æ –µ—â—ë –¥–∞–ª–µ–∫–æ, –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏–¥—ë—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–π–∫—É –ø–æ –ø—Ä—è–º–æ–º—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é. –ó–∞—Ç–æ –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–ª–∏—Ü–∏–µ–π, –∑–¥–æ—Ä–æ–≤–æ –∂–µ! üòå\n\n  üîπ –¶–µ–Ω–∞: {get_business_price_and_profit_by_funcname("–∞–≤—Ç–æ–º–æ–π–∫–∞")[0]} üíµ\n  üîπ –ü—Ä–∏–±—ã–ª—å: {get_business_price_and_profit_by_funcname("–∞–≤—Ç–æ–º–æ–π–∫–∞")[1]} üíµ / —á–∞—Å\n\n –ö—É–ø–∏—Ç—å?', reply_markup=markups.buy_carwash)


@dp.callback_query_handler(text='buy_carwash')
async def buy_carwash(message: types.Message):
    username = message.from_user.username
    business_func_name = '–∞–≤—Ç–æ–º–æ–π–∫–∞'
    if get_user_money(username) < get_business_price(business_func_name):
        await bot.send_message(message.from_user.id,
                               "‚ùå –ò–∑–≤–∏–Ω–∏, –Ω–æ –¥–µ–Ω–µ–≥ —Ç–µ–±–µ –Ω–∞ —Ç–∞–∫—É—é –ø–æ–∫—É–ø–∫—É –Ω–µ —Ö–≤–∞—Ç–∏—Ç. –í–ª–µ–∑–∞—Ç—å –≤ –¥–æ–ª–≥–∏ —Ç–æ–∂–µ –Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç, —Ç–∞–∫ —á—Ç–æ –ø–æ—É–º–µ—Ä—å —Å–≤–æ–∏ –∞–º–±–∏—Ü–∏–∏ üòâ")
        return None
    try:
        buy_business(username, business_func_name)
        await bot.send_message(message.from_user.id, '‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–∫—É–ø–∫–æ–π –∞–≤—Ç–æ–º–æ–π–∫–∏! ü•≥')
    except:
        await bot.send_message(message.from_user.id, '‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å')


@dp.callback_query_handler(text='check_cafe')
async def check_cafe(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    await bot.send_message(message.from_user.id, f'üîµ  üçõ –ö–∞—Ñ–µ ‚Äî –∫–∞–∫ –∑–∞–µ–∑–∂–µ–Ω–Ω–æ! "–î–∞ —ç—Ç–∏ –∫–∞—Ñ–µ—à–∫–∏ —É–∂–µ –Ω–∞ –∫–∞–∂–¥–æ–º —É–≥–ª—É —Å—Ç–æ—è—Ç!" ‚Äî —Ç—ã, –Ω–∞–≤–µ—Ä–Ω–æ–µ, –ø–æ–¥—É–º–∞–ª. –ù–æ –ø–æ–¥—É–º–∞–ª –ª–∏ —Ç—ã, –∫–∞–∫–∏–º –ø—Ä–∏–±—ã–ª—å–Ω—ã–º –¥–µ–ª–æ–º –º–æ–∂–µ—Ç –æ–∫–∞–∑–∞—Ç—å—Å—è –æ–±—â–µ–ø–∏—Ç, –µ—Å–ª–∏ –ø–æ–¥–æ–π—Ç–∏ —Å —É–º–æ–º? –î–∞–≤–∞–π —Ç–∞–∫: —Ç—ã –∫—É–ø–∏—à—å –∫–∞—Ñ–µ, –∞ —è –ø—Ä–æ—Å–ª–µ–∂—É, —á—Ç–æ–±—ã –æ–Ω–æ –ø—Ä–∏–Ω–æ—Å–∏–ª–æ —Ç–µ–±–µ –ø—Ä–∏–±—ã–ª—å. –ü–æ —Ä—É–∫–∞–º? ü§ñü§ùüòé\n\n  üîπ –¶–µ–Ω–∞: {get_business_price_and_profit_by_funcname("–∫–∞—Ñ–µ")[0]} üíµ\n  üîπ –ü—Ä–∏–±—ã–ª—å: {get_business_price_and_profit_by_funcname("–∫–∞—Ñ–µ")[1]} üíµ / —á–∞—Å\n\n –ö—É–ø–∏—Ç—å?', reply_markup=markups.buy_cafe)


@dp.callback_query_handler(text='buy_cafe')
async def buy_cafe(message: types.Message):
    username = message.from_user.username
    business_func_name = '–∫–∞—Ñ–µ'
    if get_user_money(username) < get_business_price(business_func_name):
        await bot.send_message(message.from_user.id,
                               "‚ùå –ò–∑–≤–∏–Ω–∏, –Ω–æ –¥–µ–Ω–µ–≥ —Ç–µ–±–µ –Ω–∞ —Ç–∞–∫—É—é –ø–æ–∫—É–ø–∫—É –Ω–µ —Ö–≤–∞—Ç–∏—Ç. –í–ª–µ–∑–∞—Ç—å –≤ –¥–æ–ª–≥–∏ —Ç–æ–∂–µ –Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç, —Ç–∞–∫ —á—Ç–æ –ø–æ—É–º–µ—Ä—å —Å–≤–æ–∏ –∞–º–±–∏—Ü–∏–∏ üòâ")
        return None
    try:
        buy_business(username, business_func_name)
        await bot.send_message(message.from_user.id, '‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–∫—É–ø–∫–æ–π –∫–∞—Ñ–µ! ü•≥')
    except:
        await bot.send_message(message.from_user.id, '‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å')


@dp.callback_query_handler(text='check_cottages')
async def check_cottages(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    await bot.send_message(message.from_user.id, f'üîµ  üèò –ö–æ—Ç—Ç–µ–¥–∂–Ω—ã–π –ø–æ—Å—ë–ª–æ–∫ –≤ –∂–∏–≤–æ–ø–∏—Å–Ω–æ–º –º–µ—Å—Ç–µ ‚Äî –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∞–≥–Ω–∏—Ç –¥–ª—è —Ç—É—Ä–∏—Å—Ç–æ–≤ –∏ –∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤. –ù–∞–π–¥—ë–º –ø—Ä–æ—Å—Ç–æ—Ä–Ω—É—é –ª—É–∂–∞–π–∫—É –≥–¥–µ-–Ω–∏–±—É–¥—å –≤–æ–∑–ª–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ–∑–µ—Ä–∞, —Å–∏–ª–∞–º–∏ –≥–∞—Å—Ç–∞—Ä–±–∞–π—Ç–µ—Ä–æ–≤ –ø–æ—Å—Ç—Ä–æ–∏–º —Ç–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–º–∏–∫–æ–≤, –∞ –ø–æ—Ç–æ–º –Ω–∞—á–Ω—ë–º –≥—Ä–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –ª–æ–ø–∞—Ç–æ–π! –ö–∞–∫ —Ç–µ–±–µ –∏–¥–µ—è? ü§©\n\n  üîπ –¶–µ–Ω–∞: {get_business_price_and_profit_by_funcname("–∫–æ—Ç—Ç–µ–¥–∂–Ω—ã–π_–ø–æ—Å—ë–ª–æ–∫")[0]} üíµ\n  üîπ –ü—Ä–∏–±—ã–ª—å: {get_business_price_and_profit_by_funcname("–∫–æ—Ç—Ç–µ–¥–∂–Ω—ã–π_–ø–æ—Å—ë–ª–æ–∫")[1]} üíµ / —á–∞—Å\n\n –ö—É–ø–∏—Ç—å?', reply_markup=markups.buy_cottages)


@dp.callback_query_handler(text='buy_cottages')
async def buy_cottages(message: types.Message):
    username = message.from_user.username
    business_func_name = '–∫–æ—Ç—Ç–µ–¥–∂–Ω—ã–π_–ø–æ—Å—ë–ª–æ–∫'
    if get_user_money(username) < get_business_price(business_func_name):
        await bot.send_message(message.from_user.id,
                               "‚ùå –ò–∑–≤–∏–Ω–∏, –Ω–æ –¥–µ–Ω–µ–≥ —Ç–µ–±–µ –Ω–∞ —Ç–∞–∫—É—é –ø–æ–∫—É–ø–∫—É –Ω–µ —Ö–≤–∞—Ç–∏—Ç. –í–ª–µ–∑–∞—Ç—å –≤ –¥–æ–ª–≥–∏ —Ç–æ–∂–µ –Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç, —Ç–∞–∫ —á—Ç–æ –ø–æ—É–º–µ—Ä—å —Å–≤–æ–∏ –∞–º–±–∏—Ü–∏–∏ üòâ")
        return None
    try:
        buy_business(username, business_func_name)
        await bot.send_message(message.from_user.id, '‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–∫—É–ø–∫–æ–π –∫–æ—Ç—Ç–µ–¥–∂–Ω–æ–≥–æ –ø–æ—Å—ë–ª–∫–∞! ü•≥')
    except:
        await bot.send_message(message.from_user.id, '‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å')


@dp.callback_query_handler(text='check_tvshow')
async def check_tvshow(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    await bot.send_message(message.from_user.id, f'üîµ  üìΩ –¢–í-—à–æ—É —Å–æ –∑–≤—ë–∑–¥–∞–º–∏ –±—É–¥–µ—Ç –ø—Ä–∏—Ç—è–≥–∏–≤–∞—Ç—å –∫ —Å–µ–±–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É—Å—Ç–∞–≤—à–∏—Ö —Ä–∞–±–æ—Ç—è–≥, –ø—Ä–∏—à–µ–¥—à–∏—Ö –≤–µ—á–µ—Ä–æ–º —Å —Ä–∞–±–æ—Ç—ã –∏ –∂–µ–ª–∞—é—â–∏—Ö –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –ø–µ—Ä–µ–¥ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–º —Å –±—É—Ç—ã–ª–∫–æ–π –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –±—É—Ä–¥—ã. –ß–µ–º –±–æ–ª—å—à–µ –º—ã —Ç–∞–∫–∏—Ö —Å–æ–±–µ—Ä—ë–º –ø–µ—Ä–µ–¥ —ç–∫—Ä–∞–Ω–∞–º–∏ ‚Äî —Ç–µ–º –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥ –ø–æ–ª—É—á–∏–º –æ—Ç —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø–∞—É–∑. –ö–æ–Ω–µ—á–Ω–æ, –æ–≥—Ä–æ–º–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ —Ç—Ä–µ–±—É—é—Ç –æ–≥—Ä–æ–º–Ω–æ–π –∑—Ä–µ–ª–∏—â–Ω–æ—Å—Ç–∏, –Ω–æ —ç—Ç—É —á–∞—Å—Ç—å —è –≥–æ—Ç–æ–≤ –≤–∑—è—Ç—å –Ω–∞ —Å–µ–±—è. –ù—É —á—Ç–æ, –ø–æ—Ä–≤—ë–º —ç–∫—Ä–∞–Ω—ã? üòà\n\n  üîπ –¶–µ–Ω–∞: {get_business_price_and_profit_by_funcname("—Ç–≤_—à–æ—É_—Å–æ_–∑–≤—ë–∑–¥–∞–º–∏")[0]} üíµ\n  üîπ –ü—Ä–∏–±—ã–ª—å: {get_business_price_and_profit_by_funcname("—Ç–≤_—à–æ—É_—Å–æ_–∑–≤—ë–∑–¥–∞–º–∏")[1]} üíµ / —á–∞—Å\n\n –ö—É–ø–∏—Ç—å?', reply_markup=markups.buy_tvshow)


@dp.callback_query_handler(text='buy_tvshow')
async def buy_tvshow(message: types.Message):
    username = message.from_user.username
    business_func_name = '—Ç–≤_—à–æ—É_—Å–æ_–∑–≤—ë–∑–¥–∞–º–∏'
    if get_user_money(username) < get_business_price(business_func_name):
        await bot.send_message(message.from_user.id,
                               "‚ùå –ò–∑–≤–∏–Ω–∏, –Ω–æ –¥–µ–Ω–µ–≥ —Ç–µ–±–µ –Ω–∞ —Ç–∞–∫—É—é –ø–æ–∫—É–ø–∫—É –Ω–µ —Ö–≤–∞—Ç–∏—Ç. –í–ª–µ–∑–∞—Ç—å –≤ –¥–æ–ª–≥–∏ —Ç–æ–∂–µ –Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç, —Ç–∞–∫ —á—Ç–æ –ø–æ—É–º–µ—Ä—å —Å–≤–æ–∏ –∞–º–±–∏—Ü–∏–∏ üòâ")
        return None
    try:
        buy_business(username, business_func_name)
        await bot.send_message(message.from_user.id, '‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –∑–∞–ø—É—Å–∫–æ–º —Å–≤–æ–µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¢–í-—à–æ—É! ü•≥')
    except:
        await bot.send_message(message.from_user.id, '‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å')


@dp.callback_query_handler(text='check_bank')
async def check_bank(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    await bot.send_message(message.from_user.id, f'üîµ  üè¶ –ë–∞–Ω–∫. –•–≤–∞—Ç–∏—Ç —Ä–µ–±—è—á–µ—Å—Ç–≤–∞, –ø–æ—Ä–∞ –∑–∞–Ω—è—Ç—å—Å—è —Å–µ—Ä—å—ë–∑–Ω—ã–º –¥–µ–ª–æ–º. –û—Å–µ–¥–ª–∞–µ–º —ç—Ç–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–≤–µ—Ä—è ‚Äî –∏ —Å–º–æ–∂–µ–º —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å —É —Å–µ–±—è –∫–∞–ø–∏—Ç–∞–ª, –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–æ—Å–µ–ª–µ —Ç—ã –∏ –≤–æ —Å–Ω–∞—Ö –Ω–µ –≤–∏–¥–µ–ª. –¢—ã —Å–æ –º–Ω–æ–π? üòè\n\n  üîπ –¶–µ–Ω–∞: {get_business_price_and_profit_by_funcname("–±–∞–Ω–∫")[0]} üíµ\n  üîπ –ü—Ä–∏–±—ã–ª—å: {get_business_price_and_profit_by_funcname("–±–∞–Ω–∫")[1]} üíµ / —á–∞—Å\n\n –ö—É–ø–∏—Ç—å?', reply_markup=markups.buy_bank)


@dp.callback_query_handler(text='buy_bank')
async def buy_bank(message: types.Message):
    username = message.from_user.username
    business_func_name = '–±–∞–Ω–∫'
    if get_user_money(username) < get_business_price(business_func_name):
        await bot.send_message(message.from_user.id,
                               "‚ùå –ò–∑–≤–∏–Ω–∏, –Ω–æ –¥–µ–Ω–µ–≥ —Ç–µ–±–µ –Ω–∞ —Ç–∞–∫—É—é –ø–æ–∫—É–ø–∫—É –Ω–µ —Ö–≤–∞—Ç–∏—Ç. –í–ª–µ–∑–∞—Ç—å –≤ –¥–æ–ª–≥–∏ —Ç–æ–∂–µ –Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç, —Ç–∞–∫ —á—Ç–æ –ø–æ—É–º–µ—Ä—å —Å–≤–æ–∏ –∞–º–±–∏—Ü–∏–∏ üòâ")
        return None
    try:
        buy_business(username, business_func_name)
        await bot.send_message(message.from_user.id, '‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–∫—É–ø–∫–æ–π –±–∞–Ω–∫–∞! ü•≥')
    except:
        await bot.send_message(message.from_user.id, '‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å')


@dp.callback_query_handler(text='check_pmc')
async def check_pmc(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    await bot.send_message(message.from_user.id, f'üîµ  üí£ –ß–∞—Å—Ç–Ω–∞—è –≤–æ–µ–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è ‚Äî –æ—Ç–±—Ä–æ—Å—å –º–æ—Ä–∞–ª—å –∏ —Å—Ç–∞–Ω—å –µ—â—ë –±–æ–≥–∞—á–µ! –í–æ–π–Ω–∞ ‚Äî –æ—á–µ–Ω—å –ø—Ä–∏–±—ã–ª—å–Ω–æ–µ –¥–µ–ª–æ, —Ç—ã –∑–Ω–∞–ª –æ–± —ç—Ç–æ–º? –ï—Å–ª–∏ –Ω–µ —Å—Ç–∞–Ω–µ—à—å –≥–ª—É–ø–∏—Ç—å –∏ –±—Ä–µ–∑–≥–æ–≤–∞—Ç—å –∫—Ä–æ–≤–∞–≤—ã–º–∏ –¥–µ–Ω—å–≥–∞–º–∏, —Ç–æ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –ø–µ—Ä–µ–¥ —Ç–≤–æ–∏–º –±–æ–≥–∞—Ç—Å—Ç–≤–æ–º –æ—Ç–∫—Ä–æ—é—Ç—Å—è –≤—Å–µ –¥–≤–µ—Ä–∏ —ç—Ç–æ–≥–æ –º–∏—Ä–∞. –ì–æ—Ç–æ–≤ —É—Å—Ç—Ä–æ–∏—Ç—å –º—è—Å–æ—Ä—É–±–∫—É? üëπ\n\n  üîπ –¶–µ–Ω–∞: {get_business_price_and_profit_by_funcname("—á–∞—Å—Ç–Ω–∞—è_–≤–æ–µ–Ω–Ω–∞—è_–∫–æ–º–ø–∞–Ω–∏—è")[0]} üíµ\n  üîπ –ü—Ä–∏–±—ã–ª—å: {get_business_price_and_profit_by_funcname("—á–∞—Å—Ç–Ω–∞—è_–≤–æ–µ–Ω–Ω–∞—è_–∫–æ–º–ø–∞–Ω–∏—è")[1]} üíµ / —á–∞—Å\n\n –ö—É–ø–∏—Ç—å?', reply_markup=markups.buy_pmc)


@dp.callback_query_handler(text='buy_pmc')
async def buy_pmc(message: types.Message):
    username = message.from_user.username
    business_func_name = '—á–∞—Å—Ç–Ω–∞—è_–≤–æ–µ–Ω–Ω–∞—è_–∫–æ–º–ø–∞–Ω–∏—è'
    if get_user_money(username) < get_business_price(business_func_name):
        await bot.send_message(message.from_user.id,
                               "‚ùå –ò–∑–≤–∏–Ω–∏, –Ω–æ –¥–µ–Ω–µ–≥ —Ç–µ–±–µ –Ω–∞ —Ç–∞–∫—É—é –ø–æ–∫—É–ø–∫—É –Ω–µ —Ö–≤–∞—Ç–∏—Ç. –í–ª–µ–∑–∞—Ç—å –≤ –¥–æ–ª–≥–∏ —Ç–æ–∂–µ –Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç, —Ç–∞–∫ —á—Ç–æ –ø–æ—É–º–µ—Ä—å —Å–≤–æ–∏ –∞–º–±–∏—Ü–∏–∏ üòâ")
        return None
    try:
        buy_business(username, business_func_name)
        await bot.send_message(message.from_user.id, '‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –ß–í–ö! üòà')
    except:
        await bot.send_message(message.from_user.id, '‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å')


@dp.callback_query_handler(text='check_spacecolonies')
async def check_spacecolonies(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    await bot.send_message(message.from_user.id, f'üîµ  üöÄ –ö–æ–ª–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ—Å–º–æ—Å–∞ —Å—Ç–∞–Ω–µ—Ç —Ç–≤–æ–∏–º —Ç—Ä–∏—É–º—Ñ–∞–ª—å–Ω—ã–º –ø–æ—Å–ª–µ–¥–Ω–∏–º —à–∞–≥–æ–º. –ö–æ–≥–¥–∞ –ó–µ–º–ª—è –±–æ–ª—å—à–µ –Ω–µ —Å–ø–æ—Å–æ–±–Ω–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å —Ç–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏, –≤—Å—ë, —á—Ç–æ –æ—Å—Ç–∞—ë—Ç—Å—è ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –∑–∞ –µ—ë –ø—Ä–µ–¥–µ–ª—ã. –¶–µ–Ω–∞ —Ç–∞–∫–æ–π –∫–∞–º–ø–∞–Ω–∏–∏, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ, –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è, –Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å —Ç–æ—á–Ω–æ —Å—Ç–æ–∏—Ç –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö –∑–∞—Ç—Ä–∞—Ç. –î–µ—Ä–∑–Ω—ë—à—å —Ä–≤–∞–Ω—É—Ç—å –≤ –∫–æ—Å–º–æ—Å? üåå\n\n  üîπ –¶–µ–Ω–∞: {get_business_price_and_profit_by_funcname("–∫–æ–ª–æ–Ω–∏–∑–∞—Ü–∏—è_–∫–æ—Å–º–æ—Å–∞")[0]} üíµ\n  üîπ –ü—Ä–∏–±—ã–ª—å: {get_business_price_and_profit_by_funcname("–∫–æ–ª–æ–Ω–∏–∑–∞—Ü–∏—è_–∫–æ—Å–º–æ—Å–∞")[1]} üíµ / —á–∞—Å\n\n –ö—É–ø–∏—Ç—å?', reply_markup=markups.buy_spacecolonies)


@dp.callback_query_handler(text='buy_spacecolonies')
async def buy_spacecolonies(message: types.Message):
    username = message.from_user.username
    business_func_name = '–∫–æ–ª–æ–Ω–∏–∑–∞—Ü–∏—è_–∫–æ—Å–º–æ—Å–∞'
    if get_user_money(username) < get_business_price(business_func_name):
        await bot.send_message(message.from_user.id,
                               "‚ùå –ò–∑–≤–∏–Ω–∏, –Ω–æ –¥–µ–Ω–µ–≥ —Ç–µ–±–µ –Ω–∞ —Ç–∞–∫—É—é –ø–æ–∫—É–ø–∫—É –Ω–µ —Ö–≤–∞—Ç–∏—Ç. –í–ª–µ–∑–∞—Ç—å –≤ –¥–æ–ª–≥–∏ —Ç–æ–∂–µ –Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç, —Ç–∞–∫ —á—Ç–æ –ø–æ—É–º–µ—Ä—å —Å–≤–æ–∏ –∞–º–±–∏—Ü–∏–∏ üòâ")
        return None
    try:
        buy_business(username, business_func_name)
        await bot.send_message(message.from_user.id, '‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –Ω–∞—á–∞–ª–æ–º –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–∞–Ω—Å–∏–∏! üöÄü•≥\n–ú–æ–∂–µ—à—å —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ –∏–≥—Ä–∞ –ø—Ä–æ–π–¥–µ–Ω–∞:)')
    except:
        await bot.send_message(message.from_user.id, '‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å')


@dp.callback_query_handler(text='business_overview')
async def business_overview(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    username = message.from_user.username
    overview = 'ü§© –í–æ—Ç, –≤–∑–≥–ª—è–Ω–∏, —á–µ–≥–æ –º—ã —É–∂–µ –¥–æ–±–∏–ª–∏—Å—å:\n\n'
    businesses = get_user_businesses(username)

    if businesses:
        profits = calculate_business_profit(username)
        for business_name in businesses.keys():
            overview += f'üîµ  {business_name}:\n    üîπ  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {businesses[business_name]}\n    üîπ  –ü—Ä–∏–±—ã–ª—å: {profits[business_name]}\n\n'
    else:
        await bot.send_message(message.from_user.id,
                               '‚ùå –ß—Ç–æ —Ç—ã –Ω–∞–¥–µ–µ—à—å—Å—è –∑–¥–µ—Å—å —É–≤–∏–¥–µ—Ç—å, –Ω–µ –∏–º–µ—è –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è?',
                               reply_markup=markups.to_main_menu)
        return None
    await bot.send_message(message.from_user.id, overview, reply_markup=markups.to_main_menu)


@dp.callback_query_handler(text='check_profit')
async def check_profit(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    username = message.from_user.username
    if not get_user_businesses(username):
        await bot.send_message(message.from_user.id,
                               '‚ùå –ö–∞–∫–∞—è –µ—â—ë –ø—Ä–∏–±—ã–ª—å? –¢—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ö–æ—Ç—å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ–º –æ–±–∑–∞–≤–µ–¥–∏—Å—å.',
                               reply_markup=markups.to_main_menu)
    elif sum(calculate_business_profit(username).values()) == 0:
        await bot.send_message(message.from_user.id,
                               f'‚ùå –¢–≤–æ–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –µ—â—ë –Ω–µ —É—Å–ø–µ–ª–∏ –Ω–∏—á–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å.\n–Ø, –∫–æ–Ω–µ—á–Ω–æ, –Ω–∞–Ω—è–ª —Å–∞–º—ã—Ö –ª—É—á—à–∏—Ö —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö, –Ω–æ –∏ –æ–Ω–∏ –Ω–µ —Å–≤–µ—Ä—Ö–ª—é–¥–∏. –î–∞–π –∏–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∞? üòâ',
                               reply_markup=markups.to_main_menu)
    else:
        profits = calculate_business_profit(username)
        msg = f'–ó–∞ —Ç–æ –≤—Ä–µ–º—è, —á—Ç–æ —Ç–µ–±—è –Ω–µ –±—ã–ª–æ, —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ —Ç–µ–±–µ {sum(profits.values())} üíµ.\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ:\n\n'
        for business_name in profits.keys():
            msg += f'üîµ  {business_name}:\n    üîπ  –ü—Ä–∏–±—ã–ª—å: {profits[business_name]}\n\n'
        msg += '–°–æ–ª–∏–¥–Ω–∞—è —Å—É–º–º–∞! –•–æ—á–µ—à—å –µ—ë –∑–∞–±—Ä–∞—Ç—å? üòâ'
        await bot.send_message(message.from_user.id, msg, reply_markup=markups.receive_profit)


@dp.callback_query_handler(text='receive_profit')
async def receive_profit(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    username = message.from_user.username
    profit = check_business_profit(username)
    if not get_user_businesses(username):
        await bot.send_message(message.from_user.id,
                               '‚ùå –ù–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å –æ—Ç –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π, –Ω–µ –∏–º–µ—è –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∏—Ö. –ù–∞ —á—Ç–æ —Ç—ã –≤–æ–æ–±—â–µ –Ω–∞–¥–µ—è–ª—Å—è?',
                               reply_markup=markups.to_main_menu)
    else:
        receive_business_profit(username)
        await bot.send_message(message.from_user.id,
                               f'‚úÖ –¢–≤–æ–π –∫–æ—à–µ–ª—ë–∫ –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ {profit} üíµ –æ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –≤–∞—à–∏–º–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è–º–∏, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!',
                               reply_markup=markups.to_main_menu)


@dp.callback_query_handler(text='roulette_rules')
async def roulette_rules(message: types.Message):
    example_stakes = ["–∫—Ä–∞—Å–Ω–æ–µ", "—á—ë—Ä–Ω–æ–µ", "—á—ë—Ç–Ω–æ–µ", "–Ω–µ—á—ë—Ç–Ω–æ–µ", "1-18", "19-36", "1-12", "13-24", "25-36", *range(37)]
    await bot.send_message(message.from_user.id,
                           f'üî¥‚ö´ –†—É–ª–µ—Ç–∫–∞ ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å –ª—é–±–æ–≥–æ –∫–∞–∑–∏–Ω–æ. –ö—Ä—É—Ç–∞–Ω—ë–º –µ—ë —Ä–∞–∑–æ—á–µ–∫? –í–æ—Ç –ø—Ä–∞–≤–∏–ª–∞:\n\n–ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É "/roulette", –¥–æ–ø–∏—Å–∞—Ç—å –∫ –Ω–µ–π —Å–µ–∫—Ç–æ—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Å—Ç–∞–≤–∏—à—å –∏ —Å—É–º–º—É —Ç–≤–æ–µ–π —Å—Ç–∞–≤–∫–∏, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–µ–∫—Ç–æ—Ä–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏: "–∫—Ä–∞—Å–Ω–æ–µ", "—á—ë—Ä–Ω–æ–µ", "—á—ë—Ç–Ω–æ–µ", "–Ω–µ—á—ë—Ç–Ω–æ–µ", "1-18", "19-36", "1-12", "13-24", "25-36", –æ–¥–Ω–æ –ª—é–±–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 36.\n–í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–æ–º–∞–Ω–¥–∞:\n\n/roulette {choice(example_stakes)} {randint(100, 10000)}\n\n–ï—Å–ª–∏ —Å—Ç–∞–≤–∫–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π, —Ç–æ —Å—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ç–∞–∫–æ–π —Ñ–æ—Ä–º—É–ª–µ: 36 / <—á–∏—Å–ª–æ –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∫—Ä—ã–≤–∞–ª–∞ —Ç–≤–æ—è —Å—Ç–∞–≤–∫–∞>. –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å—Ç–∞–≤–∏–≤ 1000 üíµ –Ω–∞ "13-24", —Ç—ã –º–æ–∂–µ—à—å –≤—ã–∏–≥—Ä–∞—Ç—å 3000 üíµ, –∞ –ø–æ—Å—Ç–∞–≤–∏–≤ –Ω–∞ "0" ‚Äî 36000 üíµ \n\n–ü–æ–º–Ω–∏, —á—Ç–æ –Ω–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥, —á–µ–º —É —Ç–µ–±—è –µ—Å—Ç—å. üòâ')


@dp.callback_query_handler(text='dice_rules')
async def dice_rules(message: types.Message):
    await bot.send_message(message.from_user.id,
                           f'üé≤ –ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π ‚Äî –æ—Å–Ω–æ–≤–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∏–≥—Ä, –Ω–æ —É –Ω–∞—Å —Ç—É—Ç –∏–≥—Ä–∞ –Ω–µ –Ω–∞—Å—Ç–æ–ª—å–Ω–∞—è, –∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è, –ø–æ—ç—Ç–æ–º—É —Å–¥–µ–ª–∞–µ–º-–∫–∞ –º—ã –ª—É—á—à–µ –Ω–∞ —ç—Ç–∏ –∫–æ—Å—Ç–∏ —Å—Ç–∞–≤–æ—á–∫—É:) –í–æ—Ç –ø—Ä–∞–≤–∏–ª–∞:\n\n–ß—Ç–æ–±—ã –±—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É "/dice", –¥–æ–ø–∏—Å–∞—Ç—å –∫ –Ω–µ–π –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –∏ —Ç–≤–æ—é —Å—Ç–∞–≤–∫—É, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç. –£ –∫–æ—Å—Ç–µ–π —à–µ—Å—Ç—å —Å—Ç–æ—Ä–æ–Ω, –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏ –ø–æ–±–µ–¥–µ —Ç–≤–æ—è —Å—Ç–∞–≤–∫–∞ –≤–µ—Ä–Ω—ë—Ç—Å—è –∫ —Ç–µ–±–µ –≤ —à–µ—Å—Ç–∏–∫—Ä–∞—Ç–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ.\n–í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–æ–º–∞–Ω–¥–∞:\n\n/dice {randint(1, 6)} {randint(100, 10000)}\n\n–ü–æ–º–Ω–∏, —á—Ç–æ –Ω–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥, —á–µ–º —É —Ç–µ–±—è –µ—Å—Ç—å. üòâ')


@dp.callback_query_handler(text='darts_rules')
async def dice_rules(message: types.Message):
    await bot.send_message(message.from_user.id,
                           f'üéØ –î–∞—Ä—Ç—Å ‚Äî –∏–≥—Ä–∞ –Ω–∞ –º–µ—Ç–∫–æ—Å—Ç—å, –∞ —É –Ω–∞—Å –±—É–¥–µ—Ç –µ—â—ë –∏ –Ω–∞ –¥–µ–Ω—å–≥–∏. –í–æ—Ç –ø—Ä–∞–≤–∏–ª–∞:\n\n–ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –≤ –¥–∞—Ä—Ç—Å, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É "/darts", –¥–æ–ø–∏—Å–∞—Ç—å –∫ –Ω–µ–π —Ç–≤–æ—é —Å—Ç–∞–≤–∫—É, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç. –®–∞–Ω—Å –ø–æ–ø–∞—Å—Ç—å –≤ —è–±–ª–æ—á–∫–æ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 1/6, –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏ –ø–æ–±–µ–¥–µ —Ç–≤–æ—è —Å—Ç–∞–≤–∫–∞ –≤–µ—Ä–Ω—ë—Ç—Å—è –∫ —Ç–µ–±–µ –≤ —à–µ—Å—Ç–∏–∫—Ä–∞—Ç–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ.\n–í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–æ–º–∞–Ω–¥–∞:\n\n/darts {randint(100, 10000)}\n\n–ü–æ–º–Ω–∏, —á—Ç–æ –Ω–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥, —á–µ–º —É —Ç–µ–±—è –µ—Å—Ç—å. üòâ')


@dp.callback_query_handler(text='soccer_rules')
async def dice_rules(message: types.Message):
    await bot.send_message(message.from_user.id,
                           f'‚öΩ –§—É—Ç–±–æ–ª ‚Äî –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∞–≥–Ω–∏—Ç –¥–ª—è —Å—Ç–∞–≤–æ–∫. –§—É—Ç–±–æ–ª–∏—Å—Ç–æ–≤ —É –Ω–∞—Å –Ω–µ—Ç, –∑–∞—Ç–æ –µ—Å—Ç—å —Å—Ç–∞–≤–∫–∏. –°—ã–≥—Ä–∞–µ–º? –í–æ—Ç –ø—Ä–∞–≤–∏–ª–∞:\n\n–ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –≤ —Ñ—É—Ç–±–æ–ª, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É "/soccer", –¥–æ–ø–∏—Å–∞—Ç—å –∫ –Ω–µ–π —Ç–≤–æ—é —Å—Ç–∞–≤–∫—É, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç. –®–∞–Ω—Å –ø–æ–ø–∞—Å—Ç—å –≤ –≤–æ—Ä–æ—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 3/5, –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏ –ø–æ–±–µ–¥–µ —Ç–≤–æ—è —Å—Ç–∞–≤–∫–∞ –≤–µ—Ä–Ω—ë—Ç—Å—è –∫ —Ç–µ–±–µ –≤ 1.66-–∫—Ä–∞—Ç–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ.\n–í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–æ–º–∞–Ω–¥–∞:\n\n/soccer {randint(100, 10000)}\n\n–ü–æ–º–Ω–∏, —á—Ç–æ –Ω–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥, —á–µ–º —É —Ç–µ–±—è –µ—Å—Ç—å. üòâ')


if __name__ == '__main__':
    executor.start_polling(dp)
